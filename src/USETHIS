import React, { useState, useEffect, useRef } from 'react';
import { Github, Linkedin, Mail, ExternalLink, Code, Database, Brain, Rocket } from 'lucide-react';

// Starfield Background Component
const StarField = () => {
  const canvasRef = useRef(null);
  const animationRef = useRef(null);
  const mouseRef = useRef({ x: 0, y: 0 });
  const stars = useRef([]);

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    const createStars = () => {
      stars.current = [];
      for (let i = 0; i < 200; i++) {
        stars.current.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          z: Math.random() * 1000,
          prevZ: Math.random() * 1000
        });
      }
    };

    const animate = () => {
      ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      
      // Mouse influence for steering effect
      const mouseInfluence = 0.0002;
      const mouseOffsetX = (mouseRef.current.x - centerX) * mouseInfluence;
      const mouseOffsetY = (mouseRef.current.y - centerY) * mouseInfluence;
      
      const speed = 2;

      stars.current.forEach(star => {
        star.prevZ = star.z;
        star.z -= speed;

        if (star.z <= 0) {
          star.x = Math.random() * canvas.width;
          star.y = Math.random() * canvas.height;
          star.z = 1000;
          star.prevZ = 1000;
        }

        // Apply mouse steering effect
        const x = (star.x - centerX + mouseOffsetX * star.z) * (200 / star.z) + centerX;
        const y = (star.y - centerY + mouseOffsetY * star.z) * (200 / star.z) + centerY;
        const prevX = (star.x - centerX + mouseOffsetX * star.prevZ) * (200 / star.prevZ) + centerX;
        const prevY = (star.y - centerY + mouseOffsetY * star.prevZ) * (200 / star.prevZ) + centerY;

        const size = (1 - star.z / 1000) * 2;
        const opacity = 1 - star.z / 1000;

        ctx.strokeStyle = `rgba(255, 255, 255, ${opacity})`;
        ctx.lineWidth = size;
        ctx.beginPath();
        ctx.moveTo(prevX, prevY);
        ctx.lineTo(x, y);
        ctx.stroke();
      });

      animationRef.current = requestAnimationFrame(animate);
    };

    resizeCanvas();
    createStars();
    animate();

    window.addEventListener('resize', () => {
      resizeCanvas();
      createStars();
    });

    const handleMouseMove = (e) => {
      mouseRef.current = { x: e.clientX, y: e.clientY };
    };

    window.addEventListener('mousemove', handleMouseMove);

    return () => {
      cancelAnimationFrame(animationRef.current);
      window.removeEventListener('resize', resizeCanvas);
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, []);

  return (
    <canvas
      ref={canvasRef}
      className="fixed inset-0 pointer-events-none z-0"
      style={{ background: 'radial-gradient(ellipse at center, #0f0f23 0%, #000 100%)' }}
    />
  );
};

// Typing Animation Hook
const useTypingAnimation = (text, speed = 100) => {
  const [displayText, setDisplayText] = useState('');
  const [isComplete, setIsComplete] = useState(false);

  useEffect(() => {
    let i = 0;
    const timer = setInterval(() => {
      if (i < text.length) {
        setDisplayText(text.slice(0, i + 1));
        i++;
      } else {
        setIsComplete(true);
        clearInterval(timer);
      }
    }, speed);

    return () => clearInterval(timer);
  }, [text, speed]);

  return { displayText, isComplete };
};

// Code Window Component
const CodeWindow = () => {
  const codeLines = [
    { text: 'class ', color: 'text-purple-400' },
    { text: 'Student', color: 'text-yellow-300' },
    { text: ':', color: 'text-white' },
    { text: '\n    ', color: 'text-white' },
    { text: 'def ', color: 'text-purple-400' },
    { text: '__init__', color: 'text-blue-400' },
    { text: '(', color: 'text-white' },
    { text: 'self', color: 'text-orange-400' },
    { text: '):', color: 'text-white' },
    { text: '\n        ', color: 'text-white' },
    { text: 'self', color: 'text-orange-400' },
    { text: '.', color: 'text-white' },
    { text: 'name ', color: 'text-blue-300' },
    { text: '= ', color: 'text-white' },
    { text: '"Caleb Kilgo"', color: 'text-green-400' },
    { text: '\n        ', color: 'text-white' },
    { text: 'self', color: 'text-orange-400' },
    { text: '.', color: 'text-white' },
    { text: 'university ', color: 'text-blue-300' },
    { text: '= ', color: 'text-white' },
    { text: '"UAH"', color: 'text-green-400' },
    { text: '\n        ', color: 'text-white' },
    { text: 'self', color: 'text-orange-400' },
    { text: '.', color: 'text-white' },
    { text: 'major ', color: 'text-blue-300' },
    { text: '= ', color: 'text-white' },
    { text: '"Computer Science"', color: 'text-green-400' },
    { text: '\n        ', color: 'text-white' },
    { text: 'self', color: 'text-orange-400' },
    { text: '.', color: 'text-white' },
    { text: 'focus ', color: 'text-blue-300' },
    { text: '= ', color: 'text-white' },
    { text: '"Data Science"', color: 'text-green-400' }
  ];

  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => {
      if (currentIndex < codeLines.length) {
        setCurrentIndex(prev => prev + 1);
      }
    }, 80);

    return () => clearInterval(timer);
  }, [currentIndex, codeLines.length]);

  return (
    <div className="relative bg-gray-900/80 backdrop-blur-md border border-gray-600/50 rounded-lg overflow-hidden shadow-2xl max-w-lg w-full">
      {/* Windows 11 Header */}
      <div className="bg-gray-800/90 border-b border-gray-600/30 px-4 py-2 flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="flex items-center space-x-1">
            {/* Windows 11 control buttons with hover effects */}
            <button className="w-3 h-3 hover:bg-gray-600 rounded-sm flex items-center justify-center transition-colors duration-200 group">
              <div className="w-2 h-0.5 bg-white/70 group-hover:bg-white transition-colors duration-200"></div>
            </button>
            <button className="w-3 h-3 hover:bg-gray-600 rounded-sm flex items-center justify-center transition-colors duration-200 group">
              <div className="w-1.5 h-1.5 border border-white/70 group-hover:border-white rounded-sm transition-colors duration-200"></div>
            </button>
            <button className="w-3 h-3 hover:bg-red-600 rounded-sm flex items-center justify-center transition-colors duration-200 group">
              <div className="w-2 h-0.5 bg-white/70 group-hover:bg-white rotate-45 absolute transition-colors duration-200"></div>
              <div className="w-2 h-0.5 bg-white/70 group-hover:bg-white -rotate-45 absolute transition-colors duration-200"></div>
            </button>
          </div>
        </div>
        <span className="text-white/80 text-sm font-mono">student.py - Visual Studio Code</span>
        <div className="w-16"></div>
      </div>
      
      {/* Code Content */}
      <div className="p-4 font-mono text-sm bg-gray-900/60 min-h-[200px]">
        <div className="flex">
          {/* Line numbers */}
          <div className="text-gray-500 pr-4 select-none">
            <div>1</div>
            <div>2</div>
            <div>3</div>
            <div>4</div>
            <div>5</div>
            <div>6</div>
            <div>7</div>
          </div>
          
          {/* Code content */}
          <div className="flex-1">
            <pre className="leading-relaxed">
              <code>
                {codeLines.slice(0, currentIndex).map((line, index) => (
                  <span key={index} className={line.color}>
                    {line.text}
                  </span>
                ))}
                {currentIndex < codeLines.length && (
                  <span className="animate-pulse bg-white/50 w-2 h-5 inline-block"></span>
                )}
              </code>
            </pre>
          </div>
        </div>
      </div>
    </div>
  );
};

// Hero Section
const Hero = () => {
  return (
    <section className="min-h-screen flex items-center justify-center relative z-10 px-6">
      <div className="max-w-6xl mx-auto text-center">
        <div className="mb-12">
          <h1 className="text-6xl md:text-8xl font-bold bg-gradient-to-r from-white via-gray-300 to-gray-600 bg-clip-text text-transparent animate-fade-in mb-6">
            CALEB KILGO
          </h1>
          <p className="text-xl md:text-2xl text-gray-400 font-light mb-2">
            Computer Science Student
          </p>
          <p className="text-lg text-gray-500 mb-12">
            University of Alabama in Huntsville
          </p>
        </div>

        {/* Code Window - Centered */}
        <div className="flex justify-center">
          <CodeWindow />
        </div>
      </div>
    </section>
  );
};

// Skills Section
const Skills = () => {
  const currentlyLearning = [
    'React.js', 'Machine Learning', 'TensorFlow', 'Deep Learning', 'AWS'
  ];
  
  const skillsLearned = [
    'Python', 'JavaScript', 'SQL', 'Git', 'Data Analysis', 'Pandas', 'NumPy', 'Matplotlib'
  ];

  const SkillTag = ({ skill, index, isLearning = false }) => (
    <div 
      className={`px-4 py-2 rounded-md border transition-all duration-300 hover:scale-110 hover:shadow-lg hover:-translate-y-1 cursor-default ${
        isLearning 
          ? 'bg-white/5 border-white/20 text-gray-300 hover:bg-white/15 hover:border-white/40 hover:text-white hover:shadow-white/20' 
          : 'bg-white/10 border-white/30 text-gray-200 hover:bg-white/20 hover:border-white/50 hover:text-white hover:shadow-white/30'
      }`}
      style={{ 
        animationDelay: `${index * 100}ms`,
        animation: 'fadeInUp 0.6s ease-out forwards'
      }}
    >
      <span className="font-mono text-sm">{skill}</span>
    </div>
  );

  return (
    <section className="py-24 px-6 relative z-10">
      <div className="max-w-4xl mx-auto">
        <h2 className="text-4xl md:text-5xl font-bold text-center mb-16 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent">
          SKILLS
        </h2>
        
        <div className="grid md:grid-cols-2 gap-12">
          {/* Currently Learning */}
          <div className="space-y-6 text-center">
            <h3 className="text-2xl font-semibold text-gray-300 flex items-center justify-center">
              <Brain className="mr-3" size={24} />
              Currently Learning
            </h3>
            <div className="flex flex-wrap gap-3 justify-center">
              {currentlyLearning.map((skill, index) => (
                <SkillTag key={skill} skill={skill} index={index} isLearning={true} />
              ))}
            </div>
          </div>

          {/* Skills Learned */}
          <div className="space-y-6 text-center">
            <h3 className="text-2xl font-semibold text-gray-200 flex items-center justify-center">
              <Code className="mr-3" size={24} />
              Skills Learned
            </h3>
            <div className="flex flex-wrap gap-3 justify-center">
              {skillsLearned.map((skill, index) => (
                <SkillTag key={skill} skill={skill} index={index} />
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

// Projects Section
const Projects = () => {
  const [showMore, setShowMore] = useState(false);
  
  const featuredProjects = [
    {
      title: "Data Science Capstone",
      description: "Machine learning model for predictive analytics using Python and scikit-learn",
      tech: ["Python", "Pandas", "scikit-learn", "Matplotlib"]
    },
    {
      title: "Web Portfolio",
      description: "Responsive React.js portfolio with space-themed animations and modern design",
      tech: ["React", "Tailwind CSS", "JavaScript", "Canvas API"]
    },
    {
      title: "Database Management System",
      description: "SQL-based inventory management system with CRUD operations and reporting",
      tech: ["SQL", "Python", "SQLite", "Tkinter"]
    }
  ];

  const ProjectCard = ({ project, index }) => (
    <div 
      className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-xl p-6 hover:bg-white/10 transition-all duration-300 hover:scale-105 hover:shadow-2xl cursor-pointer"
      style={{ animationDelay: `${index * 200}ms` }}
    >
      <div className="space-y-4">
        <h3 className="text-xl font-bold text-white">{project.title}</h3>
        <p className="text-gray-300 leading-relaxed">{project.description}</p>
        <div className="flex flex-wrap gap-2">
          {project.tech.map(tech => (
            <span key={tech} className="px-3 py-1 bg-white/10 rounded-full text-xs text-gray-300">
              {tech}
            </span>
          ))}
        </div>
      </div>
    </div>
  );

  return (
    <section className="py-24 px-6 relative z-10">
      <div className="max-w-6xl mx-auto">
        <h2 className="text-4xl md:text-5xl font-bold text-center mb-16 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent">
          PROJECTS
        </h2>
        
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
          {featuredProjects.map((project, index) => (
            <ProjectCard key={project.title} project={project} index={index} />
          ))}
        </div>

        <div className="text-center">
          <button 
            onClick={() => setShowMore(!showMore)}
            className="px-8 py-3 border border-white/30 rounded-full text-white hover:bg-white/10 transition-all duration-300 flex items-center mx-auto space-x-2 hover:scale-105"
          >
            <Rocket size={18} />
            <span>{showMore ? 'Show Less' : 'View More Projects'}</span>
          </button>
        </div>

        {showMore && (
          <div className="mt-12 p-8 bg-white/5 backdrop-blur-sm border border-white/10 rounded-xl">
            <p className="text-center text-gray-300">
              More projects coming soon! Check out my GitHub for additional work and contributions.
            </p>
          </div>
        )}
      </div>
    </section>
  );
};

// Contact Section
const Contact = () => {
  const contactLinks = [
    {
      name: 'Email',
      value: 'ckilgo@uah.edu',
      href: 'mailto:ckilgo@uah.edu',
      icon: Mail
    },
    {
      name: 'LinkedIn',
      value: 'linkedin.com/in/calebkilgo',
      href: 'https://linkedin.com/in/calebkilgo',
      icon: Linkedin
    },
    {
      name: 'GitHub',
      value: 'github.com/calebkilgo',
      href: 'https://github.com/calebkilgo',
      icon: Github
    }
  ];

  return (
    <section className="py-24 px-6 relative z-10">
      <div className="max-w-4xl mx-auto">
        <h2 className="text-4xl md:text-5xl font-bold text-center mb-16 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent">
          CONTACT
        </h2>
        
        <div className="grid md:grid-cols-3 gap-8">
          {contactLinks.map((link, index) => (
            <a
              key={link.name}
              href={link.href}
              target="_blank"
              rel="noopener noreferrer"
              className="group p-6 bg-white/5 backdrop-blur-sm border border-white/10 rounded-xl hover:bg-white/10 transition-all duration-300 hover:scale-105 text-center"
              style={{ animationDelay: `${index * 150}ms` }}
            >
              <div className="space-y-4">
                <link.icon 
                  size={32} 
                  className="mx-auto text-white group-hover:text-gray-300 group-hover:scale-110 transition-all duration-300" 
                />
                <div>
                  <h3 className="text-lg font-semibold text-white mb-2">{link.name}</h3>
                  <p className="text-gray-300 text-sm break-all">{link.value}</p>
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    </section>
  );
};

// Main App Component
const App = () => {
  useEffect(() => {
    // Add font import
    const link = document.createElement('link');
    link.href = 'https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;600;700&display=swap';
    link.rel = 'stylesheet';
    document.head.appendChild(link);
    
    // Apply font to body
    document.body.style.fontFamily = "'JetBrains Mono', monospace";
    
    // Add custom animations
    const style = document.createElement('style');
    style.textContent = `
      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
    `;
    document.head.appendChild(style);
    
    return () => {
      document.head.removeChild(link);
      document.head.removeChild(style);
    };
  }, []);

  return (
    <div className="min-h-screen bg-black text-white relative overflow-x-hidden">
      <StarField />
      
      <main className="relative z-10">
        <Hero />
        <Skills />
        <Projects />
        <Contact />
      </main>
      
      {/* Footer */}
      <footer className="relative z-10 py-8 text-center text-gray-500 border-t border-white/10">
        <p>&copy; 2025 Caleb Kilgo. Built with React & Tailwind CSS.</p>
      </footer>
    </div>
  );
};

export default App;